
--------Methods--------


// We can also add methods to objects in literal notation. 

Example: 

var someObj = {
	aProperty: value,
	someMethod: function(some, params) {

	}
};



// Methods defined in both constructors and literal notation can take parameters, just like normal functions. 


Example: 


var james = {
    job: "programmer",
    married: false,
    speak: function(mood) {
       console.log("Hello, I am feeling " + mood);
    }
};

james.speak("great");
james.speak("just okay");




// There are 2 ways to get property values: 

1. Dot notation 
someObj.propName;

2. Bracket notation
someObj["propName"];


// And advantage of bracket notation is that we are not restricted to just using strings in the brackets. We can also use variables whose values are property names. 

var someObj = {propName: someValue};
var myProperty = "propName";
someObj[myProperty];


// Example: 

var james = {
    job: "programmer",
    married: false
};

var aProperty = "job";

console.log (james[aProperty]);



// hasOwnProperty is to check whether or not an object has something. 

// Example:


var suitcase = {
    shirt: "Hawaiian"
};

if (suitcase.hasOwnProperty('shorts')) {
    console.log(suitecase.shorts);
} else {
    suitcase.shorts = "red";
    console.log(suitcase.shorts);
};



// To print out all elements in an object, you can use 'for-in' loop. 

for(var 'property' in 'dog') {
	console.log(property);
}



// Example:


var nyc = {
    fullName: "New York City",
    mayor: "Bill de Blasio",
    population: 8000000,
    boroughs: 5
};

for(var x in nyc) {
    console.log(nyc[x]);
    
}



--------Class--------


// A 'Class' is like a type, or a category of objects.
 


// 'prototype' teaches all of the objects the new method.

// Example: 

function Dog (breed) {
  this.breed = breed;
};

var buddy = new Dog("golden Retriever");
Dog.prototype.bark = function() {
  console.log("Woof");
};
buddy.bark();

var snoopy = new Dog("Beagle");
snoopy.bark();


// All of the dogs will bark. 




--------Inheritance--------


// Inheritance allows one class to see and use the methods and properties of another class.




// Example (Method Refresher): 


function Animal(name, numLegs) {
    this.name = name;
    this.numLegs = numLegs;
};

Animal.prototype.sayName = function(Animal) {
    console.log('Hi my name is ' + this.name);
}

var penguin = new Animal("Captain Cook", 2);
penguin.sayName();




// Example (Inheritance with method):


function Animal(name, numLegs) {
    this.name = name;
    this.numLegs = numLegs;
}

Animal.prototype.sayName = function() {
    console.log("Hi my name is " + this.name);
};


Penguin = function(name, numLegs) {
    this.name = name;
    this.numLegs = numLegs;
}


Penguin.prototype.sayName = function(Animal) {
    console.log('Hi my name is ' + this.name);
}

var theCaptain = new Penguin("Captain Cook", 2);
theCaptain.sayName();




// Whenever 'X is a Y' relationship exist, we should use Inheritance. 




// Example of a class inheriting properties: 


function Penguin(name) {
    this.name = name;
    this.numLegs = 2;
}


function Emperor(name) {
    this.name = name;
}


Emperor.prototype = new Penguin ("Brad");
console.log(Emperor.prototype.numLegs);



// By default, all classes inherit directly from the Object, unless we change the class' prototype. 




// Example (Inheritance using 'Object.prototype'):


// original classes

function Animal(name, numLegs) {
    this.name = name;
    this.numLegs = numLegs;
    this.isAlive = true;
}

function Penguin(name) {
    this.name = name;
    this.numLegs = 2;
}

function Emperor(name) {
    this.name = name;
    this.saying = "Waddle waddle";
}


// set up the prototype chain

Penguin.prototype = new Animal();
Emperor.prototype = new Penguin();

var myEmperor = new Emperor("Jules");

console.log( myEmperor.saying ); // should print "Waddle waddle"
console.log( myEmperor.numLegs ); // should print 2
console.log( myEmperor.isAlive ); // should print true



--------Public vs. Private Variables-------


// Public variables can be accessed from anywhere.

// Private variables are not publicly shared, and can only be accessed from within the class.


// Even though we cannot directly access private variables from outside the class, we can define a public method that returns the value of a private variable. 



// Example: 


function Person(first,last,age) {
   this.firstname = first;
   this.lastname = last;
   this.age = age;
   var bankBalance = 7500;
  
   this.getBalance = function() {
      return bankBalance;
   };
}

var john = new Person('John','Smith',30);
console.log(john.bankBalance);

// create a new variable myBalance that calls getBalance()

var myBalance = john.getBalance();


console.log(myBalance);




// Methods can also be private within a class and inaccessible outside of the class. (ex: Change 'this.returnBalance' to 'var returnBalance')




--------Typeof (and 'for-in' Review)--------


// You can figure out the type of variable by using 'typeof myVariable;'


// Example: 


var languages = {
    english: "Hello!",
    french: "Bonjour!",
    notALanguage: 4,
    spanish: "Hola!"
};


for (var x in languages) {
    if (typeof languages[x] === "string") {
        console.log(languages[x]);
    }
}






