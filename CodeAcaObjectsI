--------Objects 1--------


// Example "FizzBuzz":

for (i = 1; i <= 20; i++) {

if (i % 3 === 0 && i % 5 !== 0) {
    console.log("Fizz");
} else if (i % 5 === 0 && i % 3 !== 0){
    console.log("Buzz");
} else if (i % 3 === 0 && i % 5 === 0) {
    console.log("FizzBuzz");
} else {
    console.log(i);
}
}




// Example: "I have to celebrate your baby"



var ask = prompt("What movie review?");

var getReview = function (movie) {
    
switch(movie) {
    case "Toy Story 2":
        return ("Great story. Mean prospector.");
        break;
    case "Finding Nemo":
        return ("Cool animation, and funny turtles.");
        break;
    case "The Lion King":
        return ("Great songs.");
        break;

    default:
    return ("The movie is not found.");
}    

};

getReview(ask);




// Objects usually start with 'var', and has brackets.


// Each piece of info included in an object is known as a "property" (like a category label).


// Each property has a name, followed by its "value" (age: 21).


// You can use the dot notation to separate the object and property, or use bracket notation (ObjectName["PropertyName"]).

Example: var species = dog["species"];




// Another way of creating objects without using curly brackets is using the keyword "new". 

// This is known as creating a object using a constructor. 

Example:

var susan2 = new Object();
    susan2.name = "Susan Jordan";
    susan2.age = 21;




--------METHODS--------


// Methods are similar to functions. 

// A method is like a function associated with an object. 
// Methods are helpful when you want to update the object's properties or calculate something based on an object's properties. 


objectName.methodName()



// Functions can only use parameters as an input, but methods can make calculations with object properties. 


// Example: 


var bob = new Object();
bob.age = 17;

bob.setAge = function (newAge){
  bob.age = newAge;
};

bob.getYearOfBirth = function () {
  return 2014 - bob.age;
};

console.log(bob.getYearOfBirth());




----------THIS keyword----------

// We can make a method work for many objects using the 'this' keyword. 


// 'This' acts as a placeholder, and will refer to whichever object called that method when the method is actually used. 


// Method Example 1: 


var setAge = function (newAge) {
  this.age = newAge;
};

var bob = new Object();
bob.age = 30;

bob.setAge = setAge;
  
bob.setAge(50);




// Method Example 2: 


var rectangle = new Object();
rectangle.height = 3;
rectangle.width = 4;

rectangle.setHeight = function (newHeight) {
  this.height = newHeight;
};

rectangle.setWidth = function (newWidth) {
    this.width = newWidth;
}
  
rectangle.setWidth(8);
rectangle.setHeight(6);




--------CONSTRUCTORS--------

// A 'constructor' is a way to create an object. 

// You can make your own constructors, instead of always use the same one (like Object()).
// That way, you can set the properties for an object right when it is created.
 

// If you don't add the property in the parameter, that property will always remain the same. 


Example: 


function Person(name,age) {
  this.name = name;
  this.age = age;
  this.species = "Homo Sapiens";
}



// Constructors can also define methods in addition to setting properties. 


Example 1: 


function Person(name,age) {
  this.name = name;
  this.age = age;
  this.species = "Homo Sapiens";
}


var sally = new Person("Sally Bowles", 39);
var holden = new Person("Holden Caulfield", 16);

console.log("sally's species is " + sally.species + " and she is " + sally.age);
console.log("holden's species is " + holden.species + " and he is " + holden.age);



Example 2: 


function Rectangle(height, width) {
  this.height = height;
  this.width = width;
  this.calcArea = function() {
      return this.height * this.width;
  };
  
  this.calcPerimeter = function() {
      return 2 * (this.height + this.width);
  };
}

var rex = new Rectangle(7,3);
var area = rex.calcArea();
var perimeter = rex.calcPerimeter();



// An object can make arrays of numbers and strings. 

Example: 


function Person (name, age) {
    this.name = name;
    this.age = age;
}


var family = new Array();
family[0] = new Person("alice", 40);
family[1] = new Person("bob", 42);
family[2] = new Person("michelle", 8);
family[3] = new Person("timmy", 6);



// Arrays filled with objects will work just like arrays filled with numbers and strings. 



// Example 3:


// Person constructor

function Person(name, age) {
    this.name = name;
    this.age = age;
}

// Now we can make an array of people

var family = [];

family[0] = new Person("alice", 40);
family[1] = new Person("bob", 42);
family[2] = new Person("michelle", 8);
family[3] = new Person("timmy", 6);

// loop through FOR array

for (var i = 0; i < family.length; i++) {
    console.log(family[i].name);
} 




// You can use objects as parameters for functions as well. 

// person1 and person2 are objects.

var ageDifference = function(person1, person2) {
    return person1.age - person2.age;
}


Example: 


// Person constructor
function Person (name, age) {
    this.name = name;
    this.age = age;
}


// This function computes the difference in ages between two people.

var ageDifference = function(person1, person2) {
    return person1.age - person2.age;
};


// This function returns the age of the older person. 

var olderAge = function(person1, person2) {
    if (person1.age > person2.age) {
        return person1.age;
    } else {
        return person2.age;
    }
}


var alice = new Person("Alice", 30);
var billy = new Person("Billy", 25);

console.log("The older person is " + olderAge(alice, billy));




--------PROPERTIES--------

// Properties are like variables that belong to an object, and used to hold pieces of info. There are two ways to code it: 

1. Dot notation (ObjectName.PropertyName)

2. Bracket notation (ObjectName["PropertyName"])


